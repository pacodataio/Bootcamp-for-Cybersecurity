import os
import hashlib
# this module is a Simple scanning for suspicious files 
# A real tool analyzes different aspects of a file, here we will focus on the analysis of hashes for practicality
class MalwareScanner:
    def __init__(self):
      
        #initial  suspicius extensions database
        self.suspicious_extensions = [
            ".exe", ".bat", ".vbs", ".scr", ".js", ".ps1", ".sh", ".dll"
        ]

        # dictionary  simulating a local database with suspicious hashes
        self.known_malware_hashes = {
            # fictitious hash -> malware name
            "d2d2d2d2aabbccddeeff00112233445566778899aabbccddeeff001122334455": "TestMalware.Sample"
        }

    def calculate_hash(self, filepath):
        #Return the  hash SHA-256  of a file
        try:
            with open(filepath, "rb") as f:
                file_hash = hashlib.sha256()
                while chunk := f.read(8192):
                    file_hash.update(chunk)
            return file_hash.hexdigest()
        except Exception:
            return None

    def scan_file(self, filepath,file_hash=None):
        #Scans the file for potential threats.
        #BAsic Scan
        #heuristic by extension .exe,.bat and so on
        #Lookup in local dictionary.
        if not os.path.exists(filepath):
            return None  #  to Avoid errors if the file was deleted

        # Checking for suspicious extensions
        base, ext = os.path.splitext(filepath)
        #os.path.splitext(filepath) : split the filepath in 2 parts: one without extension (base) and the extension (ext)
        #base, ext = os.path.splitext("/home/user/file.txt") -> base='/home/user/file' and ext=".text"
        
        if ext.lower() in self.suspicious_extensions:
            return f'Suspicious file by extension: {ext}'

        if file_hash is None:
            file_hash = self.calculate_hash(filepath)
            if file_hash is None:
                return
            
        #lookup Local
        # checking for suspicious hash
        if file_hash in self.known_malware_hashes:
            return f"Malware detectado: {self.known_malware_hashes[file_hash]}"

        # no threats or suspicious files
        return None
