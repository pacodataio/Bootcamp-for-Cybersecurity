import hashlib
import os   

class Analyzer:
    def __init__(self, logger, alert):
        self.logger = logger
        self.alert = alert
        self.hashes = {}  # dictionary  {file_path: latest_hash} to keep the latest hash for every file
       

    def analyze_change(self, event_type, filepath):
        current_hash = self.calcular_hash(filepath)
        previous_hash = self.hashes.get(filepath)

        if previous_hash is None:
         # Mayybe its new file or  just cretaed, so no previous hash
            self.hashes[filepath] = current_hash
            print(f"[INFO] Nuevo archivo registrado: {filepath}")
            self.logger.log_event(event_type, filepath, current_hash)
            self.alert.send_alert(event_type, filepath)
            return

        if current_hash != previous_hash: #the file was updated, different content
            self.hashes[filepath] = current_hash
            self.logger.log_event(event_type, filepath, current_hash)
            self.alert.send_alert(event_type, filepath)
        else: #if hashes are the same, the coneten of the file is the same, no change
            # Cambio no relevante, no se genera alerta
            pass

    def calcular_hash(self, filepath):
        try:
            with open(filepath, "rb") as f:
                file_hash = hashlib.sha256() #new instance
                while chunk := f.read(8192): #reading the file per blocks of 8kb
                    file_hash.update(chunk) # the hash is updated every block is reed
            return file_hash.hexdigest() #once the reading s finish it return the final hash
        except Exception as e:
            # if the file was eliminated or not exists
            return None
